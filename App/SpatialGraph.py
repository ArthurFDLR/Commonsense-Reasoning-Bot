import matplotlib.pyplot as plt
import os
import numpy as np

class SpatialGraph():
    def __init__(self, directed:bool=True):
        self.directed = directed
        self._graph = {}
        self._nodePositions = {}
        self.startingPosition = None

    # function to find the shortest path 
    def findShortestPath(self, start:str, end:str, path =[]): 
        path = path + [start] 
        if start == end: 
            return path 
        shortest = None
        for node in self._graph[start]: 
            if node not in path: 
                newpath = self.findShortestPath(node, end, path) 
                if newpath: 
                    if not shortest or len(newpath) < len(shortest): 
                        shortest = newpath 
        return shortest

    def getStartingPosition(self):
        return self.startingPosition
    
    def setStartingPosition(self, name:str):
        if self.isPosition(name):
            self.startingPosition = name
            return True
        else:
            return False

    def isPosition(self, name:str) -> bool:
        return name in self._graph.keys()
    
    def addPosition(self, name:str, x:float, y:float, theta:float):
        if not self.isPosition(name):
            self._graph[name] = []
            self._nodePositions[name] = [x,y,theta]
            if len(self._graph) == 0:
                self.startingPosition = name
            return True
        else:
            return False
    
    def addEdge(self, fromPos:str, toPos:str):
        if self.isPosition(fromPos) and self.isPosition(toPos):
            self._graph[fromPos].append(toPos)
            if not self.directed:
                self._graph[toPos].append(fromPos)
            return True
        else:
            return False
    
    def getCoordinate(self,name:str):
        if self.isPosition(name):
            return self._nodePositions[name]
        else:
            return [0.0, 0.0, 0.0]
    
    def showGraph(self):

        #f, ax = plt.subplots()

        for node in self._nodePositions.keys():
            posStart = self._nodePositions[node]
            plt.plot(posStart[0], posStart[1], marker='o', color='black')
            plt.annotate(node, # this is the text
                 (posStart[0],posStart[1]), # this is the point to label
                 textcoords="offset points", # how to position the text
                 xytext=(5,10), # distance from text to points (x,y)
                 ha='center') # horizontal alignment can be left, right or center
            for edge in self._graph[node]:
                posGoal = self._nodePositions[edge]
                plt.plot([posStart[0], posGoal[0]], [posStart[1], posGoal[1]], 'k-')

        plt.show()
    
    def generateASP(self, sceneName:str='default'):
        relativeUrlFile = '.\\Data\\' + sceneName + '.sparc'
        fileAsp = open(relativeUrlFile,'w')
        
        vertexStr = '#vertex = {'
        nbrVertex = len(self._nodePositions)
        edgeSTR = ''

        for counterNode, node in enumerate(self._nodePositions.keys()):
            vertexStr += node
            vertexStr += '}' if counterNode==nbrVertex-1 else ','

            nbrEdge = len(self._graph[node])
            for counterEdge, edge in enumerate(self._graph[node]):
                edgeSTR += 'edge({},{}).'.format(node, edge)
                edgeSTR += '\n' if counterEdge==nbrEdge-1 else '  '
        
        fileAsp.write("%% Graph generated by the RoboticVisionSimulator during {} scene launching.\n\n".format(sceneName))
        fileAsp.write(vertexStr + '\n\n')
        fileAsp.write(edgeSTR)
        fileAsp.close()

        print('ASP graph generated:  ' + os.getcwd() + '\\' + relativeUrlFile)


from PyQt5 import QtWidgets as Qtw

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

plt.style.use('ggplot')

class WidgetPlot(Qtw.QWidget):
    def __init__(self, *args, **kwargs):
        super().__init__()

        self.setLayout(Qtw.QVBoxLayout())
        self.canvas = PlotCanvas(self, width=10, height=8)
        self.toolbar = NavigationToolbar(self.canvas, self)
        self.layout().addWidget(self.toolbar)
        self.layout().addWidget(self.canvas)

        self.canvas.updatePlot(2.0)

class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=10, height=8, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        FigureCanvas.__init__(self, fig)
        self.setParent(parent)
        FigureCanvas.setSizePolicy(self, Qtw.QSizePolicy.Expanding, Qtw.QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)
        self.dataInit = [np.sqrt(i) for i in range(100)]
        self.ax = self.figure.add_subplot(111)
        self.ax.plot(self.dataInit, 'r-', linewidth = 0.5)
        self.ax.set_title("Graph")
        self.draw()
    
    def updatePlot(self, offset):
        #self.ax.cla()

        self.ax.plot([i*offset for i in self.dataInit] , 'k-', linewidth = 2, alpha = 1.0)
        self.draw()

if __name__ == "__main__":

    def exampleGraph(showGraph:bool=False):
        graphResLarge = SpatialGraph(directed=False)
        graphResLarge.addPosition('a', -4.7, -1.75, 0.0)
        graphResLarge.addPosition('b', -4.7, 0.15,   0.0)
        graphResLarge.addPosition('c', -3.8, 0.875, 0.0)
        graphResLarge.addPosition('d', -1.9, 0.875, 0.0)
        graphResLarge.addPosition('e', -1.9, -1.75, 0.0)
        graphResLarge.addPosition('f', 0.0,  -1.75, 0.0)
        graphResLarge.addPosition('g', 2.5,  -1.75, 0.0)
        graphResLarge.addPosition('h', 0.0,  0.875, 0.0)
        graphResLarge.addPosition('i', 2.5,  0.875, 0.0)
        graphResLarge.addPosition('j', -1.9, 3.5,   0.0)
        graphResLarge.addPosition('k', 0.0,  3.5,   0.0)
        graphResLarge.addPosition('l', 0.75, 3.5,   0.0)
        graphResLarge.addPosition('m', 2.5,  3.5,   0.0)
        graphResLarge.addPosition('n', 0.75, 5.0,   0.0)
        graphResLarge.addPosition('o', -2.3, 3.6,   0.0)
        graphResLarge.addPosition('p', -3.8, 3.6,   0.0)
        graphResLarge.addPosition('q', -2.3, 5.1,   0.0)

        graphResLarge.setStartingPosition('a')

        graphResLarge.addEdge('a','b')
        graphResLarge.addEdge('b','c')
        graphResLarge.addEdge('c','d')
        for pos in ['e','h','j']:
            graphResLarge.addEdge('d',pos)
        graphResLarge.addEdge('e','f')
        graphResLarge.addEdge('f','g')
        graphResLarge.addEdge('h','i')
        graphResLarge.addEdge('j','k')
        for pos in ['p','q','j']:
            graphResLarge.addEdge('o',pos)
        for pos in ['k','n','m']:
            graphResLarge.addEdge('l',pos)
        
        if showGraph:
            graphResLarge.showGraph()
        return graphResLarge

    exampleGraph = exampleGraph(showGraph=False)

    from PyQt5.QtCore import QCoreApplication
    import sys

    app = Qtw.QApplication(sys.argv)

    appGui = WidgetPlot()
    appGui.show()

    sys.exit(app.exec_())
    